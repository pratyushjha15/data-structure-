                                                                              DATA STRUCTURE

                                              //LAB-1//
(q1 part -1)

#include <stdio.h>
// void InsertEmpty(int *arr, int num){
//     arr[0] = num;
// }
void InsertFirst(int *arr, int num){
    for(int i=10; i>0; i--){
        arr[i] = arr[i-1];
    }
    arr[0] = num;
}
void InsertLast(int *arr, int num){
    for(int i=0; i<10; i++){
       if(arr[i] == 0){
           arr[i] = num;
           break;
       }
    }
}

int main() {
    int arr[10] = {11,12,13,14,15};
    //InsertEmpty(arr, 1);
    InsertFirst(arr, 10);
    for(int i=0; i<10; i++){
       printf("%d ", arr[i]);
    }
    printf("\n");
    InsertLast(arr, 50);
    for(int i=0; i<10; i++){
       printf("%d ", arr[i]);
    }

    return 0;
}

(q1 part 2)

#include <stdio.h>
void InsertEmpty(int *arr, int first, int last){
    arr[0] = first;
    arr[1] = last;
    printf("%d %d", first, last);
}
int main() {
    
    int arr[]={0};
    InsertEmpty(arr, 12, 155);
    return 0;
}

q2)


Q3)


Q4)


//////  SORTING IN ASCENDING ORDER ////

#include <stdio.h>    
     
int main()    
{      
    int arr[] = {50, 20, 80, 70, 10};     
    int temp = 0;    
           
    int length = sizeof(arr)/sizeof(arr[0]);    
         
    printf("Elements of original array: \n");    
    for (int i = 0; i < length; i++) {     
        printf("%d ", arr[i]);     
    }      
         
    for (int i = 0; i < length; i++) {     
        for (int j = i+1; j < length; j++) {     
           if(arr[i] > arr[j]) {    
               temp = arr[i];    
               arr[i] = arr[j];    
               arr[j] = temp;    
           }     
        }     
    }    
        
    printf("\n");    
            
    printf("Elements of array sorted in ascending order: \n");    
    for (int i = 0; i < length; i++) {     
        printf("%d ", arr[i]);    
    }    
    return 0;    
}     


///  LARGETS AND SECOND LARGEST /////

#include <stdio.h>
int main ()
{
    int n = 0, i = 0, largest1 = 0, largest2 = 0, temp = 0;
 
    printf ("Enter the size of the array\n");
    scanf ("%d", &n);
    int array[n];
    printf ("Enter the elements\n");
    for (i = 0; i < n; i++)
    {
        scanf ("%d", &array[i]);
    }
 
    printf ("The array elements are : \n");
    for (i = 0; i < n; i++)
    {
        printf ("%d\t", array[i]);
    }
 
    printf ("\n");
 
    largest1 = array[0];
    largest2 = array[1];
 
    if (largest1 < largest2)
    {
        temp = largest1;
        largest1 = largest2;
        largest2 = temp;
    }
 
    for (int i = 2; i < n; i++)
    {
        if (array[i] > largest1)
        {
            largest2 = largest1;
            largest1 = array[i];
        }
        else if (array[i] > largest2 && array[i] != largest1)
        {
            largest2 = array[i];
        }
    }
 
    printf ("The FIRST LARGEST = %d\n", largest1);
    printf ("THE SECOND LARGEST = %d\n", largest2);
 
    return 0;
}

////  REVERSE OF ARRAY ////

#include<stdio.h>  
void reverse(int l, int h, int arr[]);  
void display(int arr[], int n);  
int main()  
{  
    int n, i;  
    printf("Enter the size of the array: ");  
    scanf("%d", &n);  
    int arr[n];  
    printf("Enter the elements: ");  
    for(i = 0; i < n; i++)  
    {  
        scanf("%d", &arr[i]);  
    }  
    int l = 0, h = n - 1;  
    reverse(l, h, arr);  
    printf("The reversed array: ");  
    display(arr, n);  
    return 0;  
}  
void reverse(int l, int h, int arr[])  
{  
    if(l >= h)  
    {  
        return;  
    }  
    int temp;  
    temp = arr[l];  
    arr[l] = arr[h];  
    arr[h] = temp;  
    reverse(l + 1, h - 1, arr);  //recursive call  
}  
void display(int arr[], int n)  
{  
    int i;  
    for(i = 0; i < n; i++)  
    {  
        printf("%d ", arr[i]);  
    }  
}  







                                                                                //LAB-2//

q1)
Print the Elements of a Linked List

void printLinkedList(SinglyLinkedListNode* head) 
 {
    SinglyLinkedListNode *temp=head;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
        temp=temp->next;
    }
}
q2)
Insert a Node at the Tail of a Linked List

SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {

     SinglyLinkedListNode* node = (SinglyLinkedListNode*)malloc(sizeof(SinglyLinkedListNode));
    node->data = data;
    node->next = NULL;
    if(head==NULL){
        head = node;
    }
    else{
        SinglyLinkedListNode* temp = head;
        while(temp->next != NULL){
            temp = temp->next;
            
        }
        temp->next = node;
        
    }
    return head;
     
    }

q3)
Insert a node at the head of a linked list
SinglyLinkedListNode* insertNodeAtHead(SinglyLinkedListNode* llist, int data) {

    SinglyLinkedListNode *temp = llist , *newNode;
    
    if((temp == NULL))
    {
        llist = create_singly_linked_list_node(data);
        return llist;
        
    }
    else
        {
    newNode = create_singly_linked_list_node(data);
    newNode->next = temp;
    llist = newNode;
    return llist;
        }
}

q4)
Insert a node at a specific position in a linked list


SinglyLinkedListNode* insertNodeAtPosition(SinglyLinkedListNode* head, int data, int position) {
    
    SinglyLinkedListNode* newNode = new SinglyLinkedListNode(data);
    
    
    if (position == 0) {
        newNode->next = head;
        return newNode;
    }

    
    SinglyLinkedListNode* current = head;
    for (int i = 0; i < position - 1; ++i) {
        if (current == nullptr) {
            
            return head;
        }
        current = current->next;
    }

   
    newNode->next = current->next;
    current->next = newNode;
    
    return head;
}


q5)
Delete a Node

SinglyLinkedListNode* deleteNode(SinglyLinkedListNode* llist, int position) {

    
    SinglyLinkedListNode* prev;
    SinglyLinkedListNode* temp = llist;

    
    if (temp == NULL)
        return llist;


    if (position == 0) {
        
        llist = temp->next;
        free(temp);
        return llist;
    }

    
    for (int i = 0; i != position; i++) {
        prev = temp;
        temp = temp->next;
    }

   
    if (temp != NULL) {
        prev->next = temp->next;
        free(temp);
    }
   
    else {
        cout << "Data not present\n";
    }

    return llist;
}

q6)
Print in Reverse

void reversePrint(SinglyLinkedListNode* llist) {
    if(llist==NULL){
        return;
        
    }
    reversePrint(llist->next);
    printf("%d\n",llist->data);
}
   

------------------------------------------------------------------------------------------------------------------------
    \\ lab - 3 \\
##  LINKED LIST   ##
------------------------------------------------------------------------------------------------------------------------
q1)  Inserting a Node Into a Sorted Doubly Linked List

DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* llist, int data){
    DoublyLinkedListNode* newNode= new DoublyLinkedListNode(data);
    if (llist==nullptr){
        return newNode;
    }
    if (data<=llist->data){
        newNode->next = llist;
        llist->prev = newNode;
        return newNode;
    }
      DoublyLinkedListNode*current = llist;
    while(current->next!=nullptr &&  current->next->data < data){
        current = current->next;
    }
        newNode->next = current->next;
        if(current->next!= nullptr){
            current->next->prev = newNode;
        }
         current->next = newNode;
          newNode->prev = current;

    return llist;
}

q2)  Reverse a doubly linked list

DoublyLinkedListNode* createNode(int data){
    DoublyLinkedListNode* newNode = (DoublyLinkedListNode*)malloc(sizeof(DoublyLinkedListNode));
newNode->data = data;
newNode->next = NULL;
newNode->prev = NULL;
return newNode;

}
DoublyLinkedListNode* reverse(DoublyLinkedListNode* head){
    DoublyLinkedListNode*temp=NULL;
    DoublyLinkedListNode*current=head;
    
     while (current != NULL){
          temp = current->prev;
          current->prev = current->next;
           current->next = temp;
          current= current->prev;
     }
    if (temp != NULL){
        head = temp->prev;
        
    }
    return head;
}

q3)   Cycle Detection

bool has_cycle(SinglyLinkedListNode* head) {
if (head == nullptr) {
    return false;
}
    SinglyLinkedListNode* slow = head;
    SinglyLinkedListNode* fast = head;
    while (fast != nullptr && fast->next != nullptr){
        slow = slow->next;
        fast = fast->next->next;
        
        if (slow == fast) {
            return true;
            
        }
        
    }
    return false;
}

q4)  Delete duplicate-value nodes from a sorted linked list

SinglyLinkedListNode* removeDuplicates(SinglyLinkedListNode* llist) {
if (llist == nullptr){
    return nullptr;
}
    SinglyLinkedListNode* current = llist;
    while (current != nullptr) {
     SinglyLinkedListNode* temp = current;
        while (temp->next != nullptr) {
            if (temp->next->data == current->data) {
                SinglyLinkedListNode* duplicate = temp->next;
                temp->next = temp->next->next;
                delete duplicate;
            }
            else{
                temp = temp->next;
            }
        
            }
        current= current->next;
        }
    return llist;
}

q5)  Merge two sorted linked lists

SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
SinglyLinkedListNode dummy(0);
SinglyLinkedListNode*tail = &dummy;
SinglyLinkedListNode*current1 = head1;
    SinglyLinkedListNode*current2 = head2;
    while (current1 != nullptr && current2 != nullptr) {
        if (current1->data <= current2->data) {
            tail->next = current1;
            current1 = current1->next;
        }else{
            tail->next = current2;
            current2 = current2->next;
        }
        tail = tail->next;
            
    }
     if (current1 != nullptr) {
tail->next = current1;
         }else if(current2 !=nullptr){
         tail->next= current2;
         
     }
return dummy.next;
}

----------------------------------------------------------------------------------------------------------------------------

stack 


q1)

#include <stdio.h>
#include <stdlib.h>

// Function to compute prefix sums for a given stack
void computePrefixSums(int *stack, int size, long *prefixSums) {
    prefixSums[0] = stack[0];
    for (int i = 1; i < size; i++) {
        prefixSums[i] = prefixSums[i - 1] + stack[i];
    }
}

// Function to find the maximum number of elements Nick can remove
int twoStacks(int maxSum, int *a, int n, int *b, int m) {
    long *prefix_a = (long *)malloc(n * sizeof(long));
    long *prefix_b = (long *)malloc(m * sizeof(long));
    
    // Compute prefix sums for both stacks
    computePrefixSums(a, n, prefix_a);
    computePrefixSums(b, m, prefix_b);
    
    int maxElements = 0;
    int j = m - 1; // Pointer for stack b's prefix sums

    // Iterate over stack a's prefix sums
    for (int i = 0; i < n; i++) {
        // Move j pointer to ensure the sum is within the maxSum
        while (j >= 0 && prefix_a[i] + prefix_b[j] > maxSum) {
            j--;
        }
        // If j is not negative, it means prefix_a[i] + prefix_b[j] <= maxSum
        if (j >= 0) {
            maxElements = (i + 1) + (j + 1) > maxElements ? (i + 1) + (j + 1) : maxElements;
        }
    }

    free(prefix_a);
    free(prefix_b);
    
    return maxElements;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, m, maxSum;
        scanf("%d %d %d", &n, &m, &maxSum);

        int *a = (int *)malloc(n * sizeof(int));
        int *b = (int *)malloc(m * sizeof(int));

        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }

        for (int i = 0; i < m; i++) {
            scanf("%d", &b[i]);
        }

        printf("%d\n", twoStacks(maxSum, a, n, b, m));

        free(a);
        free(b);
    }

    return 0;
}


q2)



#include <stdio.h>
#include <stdlib.h>
#include <string.h>  // Include this for strcspn

#define MAX_SIZE 100000

typedef struct {
    int *data;
    int top;
} Stack;

// Function to initialize a stack
void initStack(Stack *stack) {
    stack->data = (int *)malloc(MAX_SIZE * sizeof(int));
    stack->top = -1;
}

// Function to push an element onto the stack
void push(Stack *stack, int value) {
    stack->data[++(stack->top)] = value;
}

// Function to pop an element from the stack
int pop(Stack *stack) {
    return stack->data[(stack->top)--];
}

// Function to get the top element of the stack
int peek(Stack *stack) {
    return stack->data[stack->top];
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to handle the operations and get the maximum value
void getMax(int n, char *operations[]) {
    Stack stack, maxStack;
    initStack(&stack);
    initStack(&maxStack);

    for (int i = 0; i < n; i++) {
        int op, x;
        sscanf(operations[i], "%d %d", &op, &x);
        if (op == 1) {  // Push operation
            push(&stack, x);
            if (isEmpty(&maxStack)) {
                push(&maxStack, x);
            } else {
                int maxVal = peek(&maxStack);
                push(&maxStack, x > maxVal ? x : maxVal);
            }
        } else if (op == 2) {  // Pop operation
            if (!isEmpty(&stack)) {
                pop(&stack);
                pop(&maxStack);
            }
        } else if (op == 3) {  // Print maximum operation
            if (!isEmpty(&maxStack)) {
                printf("%d\n", peek(&maxStack));
            }
        }
    }

    // Free allocated memory
    free(stack.data);
    free(maxStack.data);
}

int main() {
    int n;
    scanf("%d", &n);
    getchar(); // Consume the newline character

    char *operations[n];
    for (int i = 0; i < n; i++) {
        operations[i] = (char *)malloc(100 * sizeof(char));
        fgets(operations[i], 100, stdin);
        // Remove the newline character if present
        operations[i][strcspn(operations[i], "\n")] = '\0';
    }

    getMax(n, operations);

    // Free allocated memory
    for (int i = 0; i < n; i++) {
        free(operations[i]);
    }

    return 0;
}



q3)

#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>

using namespace std;


int equalStacks(vector<int> h1, vector<int> h2, vector<int> h3) {
    
    int h1Sum = accumulate(h1.begin(), h1.end(), 0);
    int h2Sum = accumulate(h2.begin(), h2.end(), 0);
    int h3Sum = accumulate(h3.begin(), h3.end(), 0);

    
    auto it1 = h1.begin(), it2 = h2.begin(), it3 = h3.begin();

    
    while (it1 != h1.end() && it2 != h2.end() && it3 != h3.end()) {
       
        if (h1Sum == h2Sum && h2Sum == h3Sum) {
            return h1Sum;
        }

        
        if (h1Sum >= h2Sum && h1Sum >= h3Sum) {
            h1Sum -= *it1++;
        } else if (h2Sum >= h1Sum && h2Sum >= h3Sum) {
            h2Sum -= *it2++;
        } else {
            h3Sum -= *it3++;
        }
    }

    
    return 0;
}

int main() {
    int n1, n2, n3;
    cin >> n1 >> n2 >> n3;

    vector<int> h1(n1), h2(n2), h3(n3);

    for (int i = 0; i < n1; ++i) {
        cin >> h1[i];
    }
    for (int i = 0; i < n2; ++i) {
        cin >> h2[i];
    }
    for (int i = 0; i < n3; ++i) {
        cin >> h3[i];
    }

    int result = equalStacks(h1, h2, h3);
    cout << result << endl;

    return 0;
}


q4)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CAPACITY 100000

typedef struct {
    char *elements;
    int topIndex;
    int maxSize;
} CharStack;

void initializeStack(CharStack *stack, int size) {
    stack->maxSize = size;
    stack->topIndex = -1;
    stack->elements = (char *)malloc(size * sizeof(char));
}

void pushToStack(CharStack *stack, char element) {
    if (stack->topIndex < stack->maxSize - 1) {
        stack->elements[++(stack->topIndex)] = element;
    }
}

char popFromStack(CharStack *stack) {
    if (stack->topIndex >= 0) {
        return stack->elements[(stack->topIndex)--];
    }
    return '\0'; 
}

char topOfStack(CharStack *stack) {
    if (stack->topIndex >= 0) {
        return stack->elements[stack->topIndex];
    }
    return '\0'; 
}

int isStackEmpty(CharStack *stack) {
    return stack->topIndex == -1;
}

const char *checkBalanced(const char *input) {
    CharStack stack;
    initializeStack(&stack, strlen(input));
    
    for (int i = 0; input[i] != '\0'; i++) {
        char currentChar = input[i];
        if (currentChar == '(' || currentChar == '{' || currentChar == '[') {
            pushToStack(&stack, currentChar);
        } else {
            if (isStackEmpty(&stack)) {
                free(stack.elements);
                return "NO";
            }
            char topChar = popFromStack(&stack);
            if ((currentChar == ')' && topChar != '(') ||
                (currentChar == '}' && topChar != '{') ||
                (currentChar == ']' && topChar != '[')) {
                free(stack.elements);
                return "NO";
            }
        }
    }
    
    const char *result = isStackEmpty(&stack) ? "YES" : "NO";
    free(stack.elements);
    return result;
}

int main() {
    int testCount;
    scanf("%d", &testCount);
    getchar(); 

    for (int i = 0; i < testCount; i++) {
        char expression[100000];
        fgets(expression, sizeof(expression), stdin);
       
        expression[strcspn(expression, "\n")] = '\0';
        
        printf("%s\n", checkBalanced(expression));
    }

    return 0;
}



q5) 

#include <stdio.h>
#include <stdlib.h>

// Define a stack structure
typedef struct {
    int *data;
    int top;
    int capacity;
} Stack;

// Initialize stack
void initStack(Stack *stack, int capacity) {
    stack->capacity = capacity;
    stack->top = -1;
    stack->data = (int *)malloc(capacity * sizeof(int));
}

// Push to stack
void push(Stack *stack, int value) {
    stack->data[++(stack->top)] = value;
}

// Pop from stack
int pop(Stack *stack) {
    return stack->data[(stack->top)--];
}

// Peek top of stack
int peek(Stack *stack) {
    return stack->data[stack->top];
}

// Check if stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to calculate the largest rectangle area
long largestRectangle(int *h, int n) {
    Stack stack;
    initStack(&stack, n);
    long maxArea = 0;
    int i = 0;

    while (i < n) {
        if (isEmpty(&stack) || h[i] >= h[peek(&stack)]) {
            push(&stack, i++);
        } else {
            int topIndex = pop(&stack);
            long height = h[topIndex];
            long width = isEmpty(&stack) ? i : i - peek(&stack) - 1;
            long area = height * width;
            if (area > maxArea) {
                maxArea = area;
            }
        }
    }

    while (!isEmpty(&stack)) {
        int topIndex = pop(&stack);
        long height = h[topIndex];
        long width = isEmpty(&stack) ? i : i - peek(&stack) - 1;
        long area = height * width;
        if (area > maxArea) {
            maxArea = area;
        }
    }

    free(stack.data);
    return maxArea;
}

int main() {
    int n;
    scanf("%d", &n);
    
    int *heights = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        scanf("%d", &heights[i]);
    }

    printf("%ld\n", largestRectangle(heights, n));

    free(heights);
    return 0;
}

###############################################################
QUEUE
###############################################################

q1) 

#include <stdio.h>

#define MAX_SIZE 100000


typedef struct {
    int arr[MAX_SIZE];
    int top;
} Stack;

void initStack(Stack *stack) {
    stack->top = -1;
}

int isEmpty(Stack *stack) {
    return stack->top == -1;
}

void push(Stack *stack, int data) {
    stack->arr[++stack->top] = data;
}

int pop(Stack *stack) {
    return stack->arr[stack->top--];
}

int peek(Stack *stack) {
    return stack->arr[stack->top];
}


typedef struct {
    Stack s1, s2;
} Queue;

void initQueue(Queue *queue) {
    initStack(&queue->s1);
    initStack(&queue->s2);
}

void enqueue(Queue *queue, int data) {
    push(&queue->s1, data);
}

void transfer(Stack *s1, Stack *s2) {
    while (!isEmpty(s1)) {
        push(s2, pop(s1));
    }
}

void dequeue(Queue *queue) {
    if (isEmpty(&queue->s2)) {
        transfer(&queue->s1, &queue->s2);
    }
    if (!isEmpty(&queue->s2)) {
        pop(&queue->s2);
    }
}

void printFront(Queue *queue) {
    if (isEmpty(&queue->s2)) {
        transfer(&queue->s1, &queue->s2);
    }
    if (!isEmpty(&queue->s2)) {
        printf("%d\n", peek(&queue->s2));
    }
}

int main() {
    Queue queue;
    initQueue(&queue);

    int q;
    scanf("%d", &q);

    while (q--) {
        int type;
        scanf("%d", &type);

        if (type == 1) {
            int x;
            scanf("%d", &x);
            enqueue(&queue, x);
        } else if (type == 2) {
            dequeue(&queue);
        } else if (type == 3) {
            printFront(&queue);
        }
    }

    return 0;
}

q5)  down to zero  

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Structure for queue node
typedef struct Node {
    int value;
    int moves;
    struct Node* next;
} Node;

// Queue structure to perform BFS
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

// Function to create a new node for the queue
Node* createNode(int value, int moves) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->value = value;
    newNode->moves = moves;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize the queue
Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = queue->rear = NULL;
    return queue;
}

// Function to enqueue a value to the queue
void enqueue(Queue* queue, int value, int moves) {
    Node* newNode = createNode(value, moves);
    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
        return;
    }
    queue->rear->next = newNode;
    queue->rear = newNode;
}

// Function to dequeue a value from the queue
Node* dequeue(Queue* queue) {
    if (queue->front == NULL)
        return NULL;
    Node* temp = queue->front;
    queue->front = queue->front->next;
    if (queue->front == NULL)
        queue->rear = NULL;
    return temp;
}

// Function to perform BFS and find the minimum number of moves to reduce N to 0
int minMoves(int N) {
    // Queue to store the (value, number_of_moves)
    Queue* queue = createQueue();
    enqueue(queue, N, 0);

    // Array to track visited values
    int visited[100001] = {0};
    visited[N] = 1;

    while (queue->front != NULL) {
        Node* currentNode = dequeue(queue);
        int current = currentNode->value;
        int moves = currentNode->moves;
        free(currentNode);

        // If we've reached 0, return the number of moves
        if (current == 0)
            return moves;

        // Operation 1: Try to factorize current N
        for (int i = 2; i <= (int)sqrt(current); i++) {
            if (current % i == 0) {
                int new_value = current / i > i ? current / i : i; // max(a, b)
                if (!visited[new_value]) {
                    visited[new_value] = 1;
                    enqueue(queue, new_value, moves + 1);
                }
            }
        }

        // Operation 2: Decrement current N by 1
        if (current - 1 >= 0 && !visited[current - 1]) {
            visited[current - 1] = 1;
            enqueue(queue, current - 1, moves + 1);
        }
    }

    return -1; // Should never reach here
}

int main() {
    int Q, N;

    // Input number of queries
    scanf("%d", &Q);

    while (Q--) {
        // Input each query value N
        scanf("%d", &N);

        // Compute and output the minimum number of moves for this query
        printf("%d\n", minMoves(N));
    }

    return 0;
}

 q )   queue using 2 stack 

#include <stdio.h>

#define MAX_SIZE 100000


typedef struct {
    int arr[MAX_SIZE];
    int top;
} Stack;

void initStack(Stack *stack) {
    stack->top = -1;
}

int isEmpty(Stack *stack) {
    return stack->top == -1;
}

void push(Stack *stack, int data) {
    stack->arr[++stack->top] = data;
}

int pop(Stack *stack) {
    return stack->arr[stack->top--];
}

int peek(Stack *stack) {
    return stack->arr[stack->top];
}


typedef struct {
    Stack s1, s2;
} Queue;

void initQueue(Queue *queue) {
    initStack(&queue->s1);
    initStack(&queue->s2);
}

void enqueue(Queue *queue, int data) {
    push(&queue->s1, data);
}

void transfer(Stack *s1, Stack *s2) {
    while (!isEmpty(s1)) {
        push(s2, pop(s1));
    }
}

void dequeue(Queue *queue) {
    if (isEmpty(&queue->s2)) {
        transfer(&queue->s1, &queue->s2);
    }
    if (!isEmpty(&queue->s2)) {
        pop(&queue->s2);
    }
}

void printFront(Queue *queue) {
    if (isEmpty(&queue->s2)) {
        transfer(&queue->s1, &queue->s2);
    }
    if (!isEmpty(&queue->s2)) {
        printf("%d\n", peek(&queue->s2));
    }
}

int main() {
    Queue queue;
    initQueue(&queue);

    int q;
    scanf("%d", &q);

    while (q--) {
        int type;
        scanf("%d", &type);

        if (type == 1) {
            int x;
            scanf("%d", &x);
            enqueue(&queue, x);
        } else if (type == 2) {
            dequeue(&queue);
        } else if (type == 3) {
            printFront(&queue);
        }
    }

    return 0;
}

q )   
